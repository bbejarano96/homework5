Bryan BejaranoHomework#5Part 2:1.When you enter data, the browser, the web server, check to see that the data is the correct format and within the constraints set by the application.2.Build-in form validation. JavaScript validation.3.One of the most significant features of HTML5 form controls is the ability to validate most user data without relying on JavaScript. It's achieved using validation attributes on form elements. An example of an attribute that needs to be added to the form input element is the input Boolean attribute. 4.<form action="submit.html" id="userForm">          <input            type="text"            name="username"            placeholder="Enter Username"            pattern="[A-Za-z0-9_]{1,15}"            title="Only letters (either case), numbers, and the underscore. No more than 15 characters."            required          />          <input            type="email"            name="mail"            placeholder="Enter Email"            pattern="(\b[a-z0-9._%+-]+@[a-z0-9.-]+\.[a-z]{2,}\b)"            title="Your email must contain a @ and a valid.ext"            required          />          <input            type="password"            name="password"            placeholder="Enter Password"            pattern="^(?=.*\d)(?=.*[a-z])(?=.*[A-Z])\w{13,24}$"            title="Your password must contain at least one number, one lowercase and one uppercase letter and must be least 13 characters long, but no more than 24 characters long, containing letters, numbers or the underscore."            required          />          <button type="submit" form="userForm" id="btn">Submit</button>          <button id="btnReset">Reset</button>        </form>5.One uses javascript and the other doesn't. in this case HTML5 form validation does not us JavaScript while the constraint validation API uses JavaScript.6.Title tag, override the customized messages you would create with the JavaScript Constraint Validation API.7.The client-form validation is not enough by itself because theuser inputs are not secure. Security checks can only be done server-side and client side validation is easily manipulated or disabled. The purpose of website security is to prevent users information from being leaked or exposed.8.Important that form owners choose the correct data type for each field. Selecting an incorrect data type will not pose a security risk, but it may prevent form users from entering legitimate data. Header injection attacks can be used to send email spam from your web server.We want to use form validation at the same time to have the best UX on our site because as well . We want to get all the clients data in the right format. We want to protect all the users data by forcing the users to input secure passwords, which helps protect the information they have shared with us. We want to protect ourselves from malicious hackers. 9.Cleaner and more Improved Code, Better Semantics,Enhanced Uniformity, Mutuality, Well-Designed Forms,Ensures Better Accessibility, Better Offline Browsing.The most important is that we dont to add javascript and this is achieved by using validation attributes on form elements. 10.Required specifies a form field to be filled in before the form can be submitted.Min-length specifies the minimum of textual data strings.Max-length specifies the maximum of textual data strings.Type is the data needs to be a number, an email address, or some other specific preset type.Pattern specifies a regular expression that defines a pattern the entered data need to follow.Min specifies the minimum values of numerical input types.Max specifies the maximum values of numerical input types.